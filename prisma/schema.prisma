generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model app_user {
  id                                              Int                   @id @default(autoincrement())
  first_name                                      String?               @db.VarChar(100)
  last_name                                       String?               @db.VarChar(100)
  email                                           String                @unique @db.VarChar(150)
  google_id                                       String?               @db.VarChar(150)
  profile_picture                                 String?
  is_active                                       Boolean?              @default(true)
  role_id                                         Int?                  @default(1)
  password                                        String?
  email_validated                                 Boolean?              @default(false)
  fcm_token                                       String?
  user_role                                       user_role?            @relation(fields: [role_id], references: [id], onUpdate: NoAction)
  incident_incident_assigned_admin_idToapp_user   incident[]            @relation("incident_assigned_admin_idToapp_user")
  incident_incident_user_idToapp_user             incident[]            @relation("incident_user_idToapp_user")
  incident_history                                incident_history[]
  incident_type_admin                             incident_type_admin[]
  notification_notification_receiver_idToapp_user notification[]        @relation("notification_receiver_idToapp_user")
  notification_notification_sender_idToapp_user   notification[]        @relation("notification_sender_idToapp_user")
}

model incident {
  id                                            Int                @id @default(autoincrement())
  title                                         String?            @db.VarChar(150)
  description                                   String?
  image_url                                     String?
  priority                                      priority_enum?
  report_date                                   DateTime?          @default(now()) @db.Timestamp(6)
  close_date                                    DateTime?          @db.Timestamp(6)
  type_id                                       Int?
  status_id                                     Int?
  user_id                                       Int?
  location_id                                   Int?
  assigned_admin_id                             Int?
  app_user_incident_assigned_admin_idToapp_user app_user?          @relation("incident_assigned_admin_idToapp_user", fields: [assigned_admin_id], references: [id], onUpdate: NoAction)
  location                                      location?          @relation(fields: [location_id], references: [id], onUpdate: NoAction)
  incident_status                               incident_status?   @relation(fields: [status_id], references: [id], onUpdate: NoAction)
  incident_type                                 incident_type?     @relation(fields: [type_id], references: [id], onUpdate: NoAction)
  app_user_incident_user_idToapp_user           app_user?          @relation("incident_user_idToapp_user", fields: [user_id], references: [id], onUpdate: NoAction)
  incident_history                              incident_history[]
  notification                                  notification[]
}

model incident_history {
  id              Int       @id @default(autoincrement())
  incident_id     Int?
  previous_status String?   @db.VarChar(100)
  new_status      String?   @db.VarChar(100)
  change_date     DateTime? @default(now()) @db.Timestamp(6)
  comment         String?
  modified_by     Int?
  incident        incident? @relation(fields: [incident_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  app_user        app_user? @relation(fields: [modified_by], references: [id], onUpdate: NoAction)
}

model incident_status {
  id       Int                  @id @default(autoincrement())
  name     incident_status_enum
  incident incident[]
}

model incident_type {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(100)
  is_active           Boolean?              @default(true)
  incident            incident[]
  incident_type_admin incident_type_admin[]
}

model incident_type_admin {
  id               Int           @id @default(autoincrement())
  incident_type_id Int
  admin_id         Int
  app_user         app_user      @relation(fields: [admin_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  incident_type    incident_type @relation(fields: [incident_type_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model location {
  id        Int        @id @default(autoincrement())
  latitude  Decimal?   @db.Decimal(15, 10)
  longitude Decimal?   @db.Decimal(15, 10)
  altitude  Decimal?   @db.Decimal(15, 10)
  reference String?
  incident  incident[]
}

model notification {
  id                                          Int       @id @default(autoincrement())
  sender_id                                   Int?
  receiver_id                                 Int?
  message                                     String
  is_read                                     Boolean?  @default(false)
  created_at                                  DateTime? @default(now()) @db.Timestamp(6)
  updated_at                                  DateTime? @default(now()) @db.Timestamp(6)
  incident_id                                 Int?
  incident                                    incident? @relation(fields: [incident_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_incident_notification")
  app_user_notification_receiver_idToapp_user app_user? @relation("notification_receiver_idToapp_user", fields: [receiver_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  app_user_notification_sender_idToapp_user   app_user? @relation("notification_sender_idToapp_user", fields: [sender_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user_role {
  id       Int        @id @default(autoincrement())
  name     String     @unique @db.VarChar(50)
  app_user app_user[]
}

enum incident_status_enum {
  pendiente
  en_progreso
  resuelto
  cerrado
  re_abierto
}

enum priority_enum {
  Alta
  Media
  Baja
}

enum priorityenum {
  low
  medium
  high
}
